This is rBuild, the unified interface for Conary, rMake,
and rBuilder.  The purpose of this tool is to provide a single,
unified, and fully-documented interface (command line and Python
API) to developers using rPath technologies, using an extensible
plugin framework.

A shell script written using the command-line interface should be
relatively easy to transform to a Python program that uses the Python
API.  You can provide your own plugins that follow the same model.

Note that until version 1.0 is released, public APIs are subject to
change.  All documentation regarding stable interfaces is relevant
only to published stable releases; it is not in force for alpha
and beta releases, including 0.x releases and any automated builds.

Note also that API stability allows making changes that should be
backward-compatible in well-formed Python code.  This includes things
like adding additional optional keyword arguments and changing the
error raised in any particular error condition to a subclass of
the previous error.

API documentation is available at http://cvs.rpath.com/rbuild-docs/
or by running "make html" and viewing docs/developer/index.html (requires
epydoc).


DEVELOPMENT

Pylint Hooks
============

When developing rbuild and rbuild plugins, please consider using our
pylint commit hook.  This hook will run pylint against the files
you modified in your commit and warn you of any pylint problems.
Add the following lines to the file .hg/hgrc in your rbuild checkout:

[hooks]
precommit=./pylint/pylint_commit

Pylint problems that were caused by your patch should either be fixed
or disabled by adding a pylint pragma line.  The pylint pragma line
should look like this:

# W0611: unused variable ParseError - we want ParseError to be importable from
# errors.py even though it is not used.
# W0612: some other warning - reason why this warning is not being heeded
# pylint: disable-msg=W0611,W0612


REPORTING BUGS
==============

Please visit https://issues.rpath.com/ and file issues in the rBuild
project.
